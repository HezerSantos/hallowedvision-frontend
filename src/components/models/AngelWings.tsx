/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/angelwings.glb --types -o ./src/angelWing.tsx 
*/
// @ts-nocheck

import * as THREE from 'three'
import '@react-three/fiber';
import React, {useEffect, useRef, useMemo} from 'react'
import { useGLTF, useAnimations, Preload } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { GroupProps } from '@react-three/fiber'
import { ReactThreeFiber } from '@react-three/fiber'
import { Canvas } from '@react-three/fiber'
import { useFrame } from '@react-three/fiber'
type ActionName = 'temp.004Action.002' | 'temp.005Action.004'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    temp004: THREE.Mesh
    temp005: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}


declare global {
  namespace JSX {
    interface IntrinsicElements {
      Group: ReactThreeFiber.Node<THREE.Group, typeof THREE.Group>
      Mesh: ReactThreeFiber.Node<THREE.Mesh, typeof THREE.Mesh>
    }
  }
}



interface AngelWingsProps {
  modelUrl: string
}
// useGLTF.preload('/angelwings.glb')

export const AngelWings: React.FC<AngelWingsProps> = ({modelUrl}) => {
    if(!modelUrl){
      return(
        <>
        </>
      )
    }
    
    function Model(props: GroupProps) {
      const scaleNumber = 6.5
      const group = React.useRef<THREE.Group>(null)
      const { nodes, materials, animations } = useMemo(() => {
        return useGLTF(modelUrl) as GLTFResult;
      }, [modelUrl]);
      const { actions } = useAnimations(animations, group)

        const mouse = useRef({ x: 0, y: 0 })

        useEffect(() => {
        if (actions && Object.keys(actions).length > 0) {
          // Play first animation
          const firstActionName = Object.keys(actions)[0]
          if (firstActionName && actions[firstActionName]) {
            const action = actions[firstActionName]
            action.reset()
            action.timeScale = 0.25
            action.play()
          }

          // Play second animation if it exists
          const secondActionName = Object.keys(actions)[1]
          if (secondActionName && actions[secondActionName]) {
            const action = actions[secondActionName]
            action.reset()
            action.timeScale = 0.25
            action.play()
          }
        }
      }, [actions])
      return (
        <group 
          ref={group} 
          {...props} 
          dispose={null}
          scale={[scaleNumber, scaleNumber, scaleNumber]}
        >
          <group name="Scene">
            <mesh 
              name="temp004" 
              geometry={nodes.temp004.geometry} 
              material={materials['Material.001']} 
              rotation={[Math.PI / 2, 0, 0.234]} 
            />
            <mesh 
              name="temp005" 
              geometry={nodes.temp005.geometry} 
              material={materials['Material.001']} 
              rotation={[Math.PI / 2, 0, -0.234]} 
            />
          </group>
        </group>
      )
  }


  return(
    <>
      <div className='home_header_angel-wings'>
        <Canvas>
          <directionalLight position={[0, 0, 5]} intensity={1} />
          <ambientLight intensity={0.5} />
          <Preload all/>
          <Model />
        </Canvas>
      </div>
    </>
  )
}