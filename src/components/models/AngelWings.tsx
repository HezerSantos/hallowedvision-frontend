/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/angelwings.glb --types -o ./src/angelWing.tsx 
*/
// @ts-nocheck

import * as THREE from 'three'
import '@react-three/fiber';
import React, {useEffect, useRef} from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { GroupProps } from '@react-three/fiber'
import { ReactThreeFiber } from '@react-three/fiber'
import { Canvas } from '@react-three/fiber'
import { useFrame } from '@react-three/fiber'
type ActionName = 'temp.004Action.002' | 'temp.005Action.004'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    temp004: THREE.Mesh
    temp005: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}


declare global {
  namespace JSX {
    interface IntrinsicElements {
      Group: ReactThreeFiber.Node<THREE.Group, typeof THREE.Group>
      Mesh: ReactThreeFiber.Node<THREE.Mesh, typeof THREE.Mesh>
    }
  }
}

function Model(props: GroupProps) {
  const scaleNumber = 6.5
  const group = React.useRef<THREE.Group>(null)
  const { nodes, materials, animations } = useGLTF('/3d/angelwings.glb') as GLTFResult
  const { actions } = useAnimations(animations, group)

    const mouse = useRef({ x: 0, y: 0 })

    // useFrame(() => {
    // if (group.current) {
    //     // smooth lerp toward target rotation
    //     const temp004 = group.current.getObjectByName('temp004');
    //     const temp005 = group.current.getObjectByName('temp005');

    //   if (temp004) {
    //     // Wing 1 moves opposite mouse X direction
    //     temp004.position.x = mouse.current.x;  
    //     temp004.position.y = mouse.current.y * -1;
    //   }

    //   if (temp005) {
    //     // Wing 1 moves opposite mouse X direction
    //     temp005.position.x = mouse.current.x;  
    //     temp005.position.y = mouse.current.y * -1;
    //   }

    //     group.current.rotation.y += (mouse.current.x * 0.5 - group.current.rotation.y) * 0.05
    //     group.current.rotation.x += (mouse.current.y * 0.3 - group.current.rotation.x) * 0.05

        
    //   }
    // })


    // useEffect(() => {
    //   if (typeof window === 'undefined') return;

    //   const handleMouseMove = (event: MouseEvent) => {
    //     console.log((event.clientX / window.innerWidth - 0.5) * 2)
    //     mouse.current.x = (event.clientX / window.innerWidth - 0.5) * 2;
    //     mouse.current.y = (event.clientY / window.innerHeight - 0.5) * 2;
    //   };

    //   window.addEventListener('mousemove', handleMouseMove);

    //   return () => {
    //     window.removeEventListener('mousemove', handleMouseMove);
    //   };
    // }, []);

    useEffect(() => {
    if (actions && Object.keys(actions).length > 0) {
      // Play first animation
      const firstActionName = Object.keys(actions)[0]
      if (firstActionName && actions[firstActionName]) {
        const action = actions[firstActionName]
        action.reset()
        action.timeScale = 0.25
        action.play()
      }

      // Play second animation if it exists
      const secondActionName = Object.keys(actions)[1]
      if (secondActionName && actions[secondActionName]) {
        const action = actions[secondActionName]
        action.reset()
        action.timeScale = 0.25
        action.play()
      }
    }
  }, [actions])
  return (
    <group 
      ref={group} 
      {...props} 
      dispose={null}
      scale={[scaleNumber, scaleNumber, scaleNumber]}
    >
      <group name="Scene">
        <mesh 
          name="temp004" 
          geometry={nodes.temp004.geometry} 
          material={materials['Material.001']} 
          rotation={[Math.PI / 2, 0, 0.234]} 
        />
        <mesh 
          name="temp005" 
          geometry={nodes.temp005.geometry} 
          material={materials['Material.001']} 
          rotation={[Math.PI / 2, 0, -0.234]} 
        />
      </group>
    </group>
  )
}

useGLTF.preload('/angelwings.glb')

export const AngelWings = () => {
  return(
    <>
      <div className='home_header_angel-wings'>
        <Canvas>
          <directionalLight position={[0, 0, 5]} intensity={1} />
          <ambientLight intensity={0.5} />
          <Model />
        </Canvas>
      </div>
    </>
  )
}